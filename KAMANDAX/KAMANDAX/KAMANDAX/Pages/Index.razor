@page "/index/{id}"


<h2 class="ProductsForYouText">Products for you!</h2>

<div class="searchingFilter">
    <input class="searchingFilterText" @bind-value="SearchTerm" @bind-value:event="oninput" placeholder="Type to search for anything" />

    <p>
        <MatSelectItem @bind-Value="@value1" Items="@value1Items"></MatSelectItem>
    </p>
</div>

<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner">
        @foreach (var product in FilteredProducts)
        {
            <ProductCard Product="product" User="user" />
        }

    </div>
</div>


@code {
    [Parameter]
    public string Id { get; set; }

    public List<Product> Products { get; set; } = new List<Product>();
    public string SearchTerm { get; set; } = "";
    public User user { get; set; } = new User();
    string value1 = "All";

    protected async override Task OnInitializedAsync()
    {

        string token = request.RefreshToken;
        RefreshToken rtoken = await refreshService.GetByToken(token);
        user = await users.GetUserById(rtoken.UserId);
        Products = await productService.GetProducts();
        for (int i = Products.Count() - 1; i >= 0; i--)
        {
            Products.Insert(Products.Count(), Products[i]);
            Products.RemoveAt(i);
        }

    }

    string[] value1Items = new[]
    {
                "All",
                "Rings",
                "Necklaces",
                "Earrings",
                "Bracelets",
                "Watches",

    };

    List<Product> FilteredProducts => FilteredToDos.Where(i => i.Category.ToLower().Equals(value1.ToLower()) || value1.Equals("All")).ToList();
    List<Product> FilteredToDos => Products.Where(i => i.Title.ToLower().Contains(SearchTerm.ToLower())).ToList();

}